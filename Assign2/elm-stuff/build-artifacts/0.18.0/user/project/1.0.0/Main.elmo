var _user$project$Main$factorial = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? 1 : (n * _user$project$Main$factorial(n - 1));
};
var _user$project$Main$combinatorics = F2(
	function (x, y) {
		var factB = _user$project$Main$factorial(x - y);
		var factY = _user$project$Main$factorial(y);
		var factX = _user$project$Main$factorial(x);
		return factX / (factY * factB);
	});
var _user$project$Main$check = F2(
	function (x, y) {
		return (_elm_lang$core$Native_Utils.cmp(x, y) < 0) ? 0 : A2(_user$project$Main$combinatorics, x, y);
	});
var _user$project$Main$toFloa = function (x) {
	return _elm_lang$core$Basics$toFloat(x);
};
var _user$project$Main$mod = F2(
	function (x, y) {
		return _elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], x, y));
	});
var _user$project$Main$styleFort = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: 'black'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '8px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'padding', _1: '0px 0px 0px 0px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin', _1: '0px 0px 0px 0px'},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Main$styleTitle = _elm_lang$html$Html_Attributes$style(
	{
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: 'black'},
		_1: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'font-size', _1: '40px'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'color', _1: 'white'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'font-family', _1: 'Arial'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'textAlign', _1: 'center'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '30px 0px 30px 0px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '0px 480px 0px 480px'},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$stylesheet = function () {
	var children = {ctor: '[]'};
	var attrs = {
		ctor: '::',
		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'Rel', 'stylesheet'),
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'property', 'stylesheet'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'href', 'styles.css'),
				_1: {ctor: '[]'}
			}
		}
	};
	var tag = 'link';
	return A3(_elm_lang$html$Html$node, tag, attrs, children);
}();
var _user$project$Main$actionHeight = F2(
	function (msg, buttonText) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button height'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(msg),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buttonText),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$actionWide = F2(
	function (msg, buttonText) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button wide'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(msg),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buttonText),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$action = F2(
	function (msg, buttonText) {
		return A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('button'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(msg),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$span,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(buttonText),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$addDecimal = function (string) {
	return A2(_elm_lang$core$String$contains, '.', string) ? string : A2(_elm_lang$core$Basics_ops['++'], string, '.');
};
var _user$project$Main$decimal = function (model) {
	return ((!_elm_lang$core$String$isEmpty(model.screen)) && model.group) ? _elm_lang$core$Native_Utils.update(
		model,
		{
			screen: _user$project$Main$addDecimal(model.screen)
		}) : _elm_lang$core$Native_Utils.update(
		model,
		{screen: '0.', group: true});
};
var _user$project$Main$zero = function (model) {
	return (_elm_lang$core$String$isEmpty(model.screen) || (!model.group)) ? _elm_lang$core$Native_Utils.update(
		model,
		{screen: '0', group: false}) : _elm_lang$core$Native_Utils.update(
		model,
		{
			screen: A2(_elm_lang$core$Basics_ops['++'], model.screen, '0')
		});
};
var _user$project$Main$refreshAnswer = F2(
	function (model, number) {
		return model.group ? _elm_lang$core$Native_Utils.update(
			model,
			{
				screen: A2(
					_elm_lang$core$Basics_ops['++'],
					model.screen,
					_elm_lang$core$Basics$toString(number))
			}) : _elm_lang$core$Native_Utils.update(
			model,
			{
				screen: _elm_lang$core$Basics$toString(number),
				group: true
			});
	});
var _user$project$Main$parseAnswer = function (ans) {
	return A2(
		_elm_lang$core$Result$withDefault,
		0,
		_elm_lang$core$String$toFloat(ans));
};
var _user$project$Main$operation = F2(
	function (model, func) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				func: func,
				answer: _user$project$Main$parseAnswer(model.screen),
				group: false
			});
	});
var _user$project$Main$calc = function (model) {
	return _elm_lang$core$Basics$toString(
		A2(
			model.func,
			model.answer,
			_user$project$Main$parseAnswer(model.screen)));
};
var _user$project$Main$equal = function (model) {
	return model.group ? _elm_lang$core$Native_Utils.update(
		model,
		{
			screen: _user$project$Main$calc(model),
			answer: _user$project$Main$parseAnswer(model.screen),
			group: false
		}) : _elm_lang$core$Native_Utils.update(
		model,
		{
			screen: _user$project$Main$calc(model),
			group: false
		});
};
var _user$project$Main$init = {
	screen: '',
	func: F2(
		function (x, y) {
			return y;
		}),
	answer: 0,
	group: true
};
var _user$project$Main$operations = {
	addition: F2(
		function (x, y) {
			return x + y;
		}),
	subtraction: F2(
		function (x, y) {
			return x - y;
		}),
	multiplication: F2(
		function (x, y) {
			return x * y;
		}),
	floatDivision: F2(
		function (x, y) {
			return x / y;
		}),
	power: F2(
		function (x, y) {
			return Math.pow(x, y);
		}),
	root: F2(
		function (x, y) {
			return Math.pow(x, 1 / y);
		}),
	plusTax: F2(
		function (x, y) {
			return x * (y / 100);
		}),
	minusTax: F2(
		function (x, y) {
			return x - (x * (y / 100));
		}),
	totalTax: F2(
		function (x, y) {
			return x + (x * (y / 100));
		}),
	combinatrix: F2(
		function (x, y) {
			return A2(_user$project$Main$check, x, y);
		})
};
var _user$project$Main$refresh = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'None':
				return model;
			case 'Clear':
				return _user$project$Main$init;
			case 'Number':
				return A2(_user$project$Main$refreshAnswer, model, _p0._0);
			case 'Decimal':
				return _user$project$Main$decimal(model);
			case 'Zero':
				return _user$project$Main$zero(model);
			case 'Divide':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.floatDivision);
			case 'Combo':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.combinatrix);
			case 'Power':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.power);
			case 'Root':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.root);
			case 'PlusTax':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.plusTax);
			case 'MinusTax':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.minusTax);
			case 'TotalTax':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.totalTax);
			case 'Multiply':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.multiplication);
			case 'Subtract':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.subtraction);
			case 'Plus':
				return A2(_user$project$Main$operation, model, _user$project$Main$operations.addition);
			default:
				return _user$project$Main$equal(model);
		}
	});
var _user$project$Main$Calc = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {addition: a, subtraction: b, multiplication: c, floatDivision: d, power: e, root: f, plusTax: g, minusTax: h, totalTax: i, combinatrix: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {screen: a, func: b, answer: c, group: d};
	});
var _user$project$Main$Clear = {ctor: 'Clear'};
var _user$project$Main$Number = function (a) {
	return {ctor: 'Number', _0: a};
};
var _user$project$Main$Zero = {ctor: 'Zero'};
var _user$project$Main$Decimal = {ctor: 'Decimal'};
var _user$project$Main$Equal = {ctor: 'Equal'};
var _user$project$Main$MinusTax = {ctor: 'MinusTax'};
var _user$project$Main$TotalTax = {ctor: 'TotalTax'};
var _user$project$Main$PlusTax = {ctor: 'PlusTax'};
var _user$project$Main$Plus = {ctor: 'Plus'};
var _user$project$Main$Subtract = {ctor: 'Subtract'};
var _user$project$Main$Multiply = {ctor: 'Multiply'};
var _user$project$Main$Power = {ctor: 'Power'};
var _user$project$Main$Root = {ctor: 'Root'};
var _user$project$Main$Combo = {ctor: 'Combo'};
var _user$project$Main$Divide = {ctor: 'Divide'};
var _user$project$Main$display = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{
					ctor: '::',
					_0: _user$project$Main$styleTitle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('MY DOPE CALCULATOR'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('calculator'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Main$stylesheet,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('row'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('col-xs-12'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('display'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$div,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$class('display-text'),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(model.screen),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$div,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('buttons'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_user$project$Main$action,
															_user$project$Main$Number(1),
															'1'),
														_1: {
															ctor: '::',
															_0: A2(
																_user$project$Main$action,
																_user$project$Main$Number(2),
																'2'),
															_1: {
																ctor: '::',
																_0: A2(
																	_user$project$Main$action,
																	_user$project$Main$Number(3),
																	'3'),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_user$project$Main$action,
																		_user$project$Main$Number(4),
																		'4'),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_user$project$Main$action,
																			_user$project$Main$Number(5),
																			'5'),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_user$project$Main$action,
																				_user$project$Main$Number(6),
																				'6'),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_user$project$Main$action,
																					_user$project$Main$Number(7),
																					'7'),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_user$project$Main$action,
																						_user$project$Main$Number(8),
																						'8'),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_user$project$Main$action,
																							_user$project$Main$Number(9),
																							'9'),
																						_1: {
																							ctor: '::',
																							_0: A2(_user$project$Main$action, _user$project$Main$Plus, '+'),
																							_1: {
																								ctor: '::',
																								_0: A2(_user$project$Main$action, _user$project$Main$Subtract, '-'),
																								_1: {
																									ctor: '::',
																									_0: A2(_user$project$Main$action, _user$project$Main$Zero, '0'),
																									_1: {
																										ctor: '::',
																										_0: A2(_user$project$Main$action, _user$project$Main$Multiply, 'x'),
																										_1: {
																											ctor: '::',
																											_0: A2(_user$project$Main$action, _user$project$Main$Divide, '÷'),
																											_1: {
																												ctor: '::',
																												_0: A2(_user$project$Main$action, _user$project$Main$Decimal, '.'),
																												_1: {
																													ctor: '::',
																													_0: A2(_user$project$Main$action, _user$project$Main$Power, 'x ^ y'),
																													_1: {
																														ctor: '::',
																														_0: A2(_user$project$Main$action, _user$project$Main$Root, 'x√y'),
																														_1: {
																															ctor: '::',
																															_0: A2(_user$project$Main$action, _user$project$Main$Combo, 'nCr'),
																															_1: {
																																ctor: '::',
																																_0: A2(_user$project$Main$action, _user$project$Main$PlusTax, 'Tax'),
																																_1: {
																																	ctor: '::',
																																	_0: A2(_user$project$Main$action, _user$project$Main$MinusTax, 'Minus Tax'),
																																	_1: {
																																		ctor: '::',
																																		_0: A2(_user$project$Main$action, _user$project$Main$TotalTax, 'Total Tax'),
																																		_1: {
																																			ctor: '::',
																																			_0: A2(_user$project$Main$actionHeight, _user$project$Main$Equal, '='),
																																			_1: {
																																				ctor: '::',
																																				_0: A2(_user$project$Main$actionWide, _user$project$Main$Clear, 'RESET'),
																																				_1: {ctor: '[]'}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{
									ctor: '::',
									_0: _user$project$Main$styleTitle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('MY DOPE CALCULATOR'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _user$project$Main$styleFort,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('P.S. Fortnite Is Better Than PUBG'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$init, view: _user$project$Main$display, update: _user$project$Main$refresh})();
var _user$project$Main$None = {ctor: 'None'};
